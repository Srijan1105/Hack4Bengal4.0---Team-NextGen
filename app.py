import pdfkit
from flask import Flask, request, jsonify, render_template, send_file
from datetime import datetime
from flask_cors import CORS
from flask_mail import Mail, Message
import pytesseract
from PIL import Image
from pdf2image import convert_from_bytes
import tempfile
import re
import os

app = Flask(__name__, template_folder='templates')
CORS(app)  # Allow requests from frontend

app.config['MAIL_SERVER'] = 'smtp.gmail.com'           # or your SMTP
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'dassrijan76@gmail.com'   # Replace with sender email
app.config['MAIL_PASSWORD'] = 'ryfc ysho nlfs pubv'      # App password or real password

mail = Mail(app)

@app.route('/')
def index():
    return render_template('index.html')
@app.route('/analyze', methods=['POST'])
def analyze():
    data = request.json
    name = data.get('name', 'Student')
    marks = data.get('marks', {})
    interests = data.get('interests', '')

    strengths = []
    for subject, score in marks.items():
        try:
            score = int(score) if score is not None else 0
        except ValueError:
            score = 0

        if score >= 90:
            strengths.append(f"Excellent in {subject}")
        elif score >= 75:
            strengths.append(f"Good in {subject}")
        elif score >= 60:
            strengths.append(f"Decent in {subject}")

    recommendations = [
        {"career": "Computer Science", "score": 95},
        {"career": "AI & ML", "score": 90},
        {"career": "Game Development", "score": 88}
    ]

    return jsonify({
        "name": name,
        "strengths": strengths,
        "recommendations": recommendations,
        "marks": marks,
        "interests": interests
    })

@app.route('/generate-pdf', methods=['POST'])
def generate_pdf():
    data = request.json
    html = render_template(
        'report_template.html',
        name=data.get('name'),
        date=datetime.now().strftime('%B %d, %Y'),
        marks=data.get('marks'),
        strengths=data.get('strengths'),
        recommendations=data.get('recommendations'),
        interests=data.get('interests')
    )
    pdf_path = f"career_report_{data.get('name').replace(' ', '_')}.pdf"
    pdfkit.from_string(html, pdf_path)
    return send_file(pdf_path, as_attachment=True)

@app.route('/send-email', methods=['POST'])
def send_email():
    data = request.json
    name = data.get('name')
    email = data.get('email')
    pdf_filename = f"career_report_{name.replace(' ', '_')}.pdf"

    # Render and save PDF
    html = render_template(
        'report_template.html',
        name=name,
        date=datetime.now().strftime('%B %d, %Y'),
        marks=data.get('marks'),
        strengths=data.get('strengths'),
        recommendations=data.get('recommendations'),
        interests=data.get('interests')
    )
    pdfkit.from_string(html, pdf_filename)

    # Compose email
    msg = Message(
        subject="Your Career Guidance Report from PathFinder",
        sender=app.config['MAIL_USERNAME'],
        recipients=[email],
        body=f"Hi {name},\n\nAttached is your personalized career guidance report generated by PathFinder. Best of luck for your future!"
    )
    with app.open_resource(pdf_filename) as pdf:
        msg.attach(pdf_filename, "application/pdf", pdf.read())

    mail.send(msg)
    os.remove(pdf_filename)  # Cleanup after sending
    return jsonify({"message": f"Email sent successfully to {email}!"})

@app.route('/upload-file', methods=['POST'])
def upload_file():
    uploaded_file = request.files['file']
    filename = uploaded_file.filename.lower()
    text = ""

    if filename.endswith('.pdf'):
        images = convert_from_bytes(uploaded_file.read())
        for img in images:
            text += pytesseract.image_to_string(img)
    elif filename.endswith(('.jpg', '.jpeg', '.png')):
        image = Image.open(uploaded_file)
        text = pytesseract.image_to_string(image)
    else:
        return jsonify({"error": "Unsupported file format"}), 400

    # Extract marks using regex
    marks = extract_marks_from_text(text)
    return jsonify({"marks": marks, "raw_text": text})

def extract_marks_from_text(text):
    subject_patterns = {
        "Mathematics": r"Math(?:ematics)?\s*[:\-]?\s*(\d{1,3})",
        "Physics": r"Physics\s*[:\-]?\s*(\d{1,3})",
        "Chemistry": r"Chemistry\s*[:\-]?\s*(\d{1,3})",
        "Computer Science": r"Computer\s*Science\s*[:\-]?\s*(\d{1,3})",
        "English": r"English\s*[:\-]?\s*(\d{1,3})",
        "Social Studies": r"Social\s*Studies\s*[:\-]?\s*(\d{1,3})"
    }

    marks = {}
    for subject, pattern in subject_patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            marks[subject] = int(match.group(1))
    return marks

if __name__ == '__main__':
    app.run(debug=True)

    
